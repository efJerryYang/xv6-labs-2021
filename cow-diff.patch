diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..82ec414
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "param.h": "c",
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..39c9337 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -170,6 +170,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t*          walk(pagetable_t, uint64, int);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..467a14f 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,6 +23,8 @@ struct {
   struct run *freelist;
 } kmem;
 
+int page_reference_count[PGREF_CNT(PHYSTOP)];
+
 void
 kinit()
 {
@@ -35,8 +37,10 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    page_reference_count[PGREF_CNT((uint64)p)] = 1;
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by v,
@@ -51,6 +55,14 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  if ((uint64)pa >= KERNBASE) {
+    if (page_reference_count[PGREF_CNT((uint64)pa)] <= 0)
+      panic("kfree: page is already free");
+    if(--page_reference_count[PGREF_CNT((uint64)pa)] > 0)
+      return;
+  }
+
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -76,7 +88,10 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r){
     memset((char*)r, 5, PGSIZE); // fill with junk
+    page_reference_count[PGREF_CNT((uint64)r)] = 1;
+  }
+
   return (void*)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..9cd4f61 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -335,6 +335,8 @@ sfence_vma()
 #define PGSIZE 4096 // bytes per page
 #define PGSHIFT 12  // bits of offset within a page
 
+#define PGREF_CNT(pa)  (((pa)-KERNBASE) / PGSIZE)
+
 #define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
 #define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
 
@@ -343,6 +345,15 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+// #define PTE_RSW  // reserved for supervisor software
+// | 9 | 8 |
+// +---+---+
+// | 0 | 0 |  // not set  
+// | 0 | 1 |  // set by COW
+// | 1 | 0 |
+// | 1 | 1 |
+// +---+---+
+#define PTE_COW (1L << 8) // set by COW
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..601608a 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -13,7 +13,7 @@ extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
-
+extern int page_reference_count[]; // array size is PHYSTOP/PGSIZE
 extern int devintr();
 
 void
@@ -50,6 +50,11 @@ usertrap(void)
   // save user program counter.
   p->trapframe->epc = r_sepc();
   
+  // see https://five-embeddev.com/riscv-isa-manual/latest/supervisor.html#sec:scause
+  // 0 	12 	Instruction page fault 	
+  // 0 	13 	Load page fault 	
+  // 0 	14 	Reserved 	
+  // 0 	15 	Store/AMO page fault
   if(r_scause() == 8){
     // system call
 
@@ -65,6 +70,44 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 12 || r_scause() == 13 || r_scause() == 15){
+    // page fault
+    uint64 va = r_stval(); // store the faulting address
+    // free previous page and add the newly allocated page to the pagetable
+    if(va >= MAXVA || (va <= PGROUNDDOWN(p->trapframe->sp) && va >= PGROUNDDOWN(p->trapframe->sp)-PGSIZE))
+      goto trap_err;
+    uint64 * pte = walk(p->pagetable, va, 0);
+    if (pte == 0) {
+      panic("usertrap(): pte should exist\n");
+    }
+    if ((*pte & PTE_V) == 0) {
+      panic("usertrap(): page should exist\n");
+    }
+    if ((*pte & PTE_COW)) {
+      uint64 pa = PTE2PA(*pte);
+      uint flags = PTE_FLAGS(*pte);
+      char* page;  // allocate a new page
+      if ((page = kalloc()) == 0) {
+        p->killed = 1;
+        goto trap_err;
+      }
+      // memset(page, 0, PGSIZE);  // zero the page
+      memmove(page, (char*)pa, PGSIZE); // copy the content of the old page to the new page
+      // *pte = 0;                 // clear the PTE, so that we can remap the page
+      // uvmunmap(p->pagetable, PGROUNDDOWN(va), 1, 0);
+      // mappages(p->pagetable, PGROUNDDOWN(va), PGSIZE, (uint64)page, PTE_W | (flags & ~PTE_COW)); // map the page
+      *pte = PA2PTE((uint64)page) | (flags & ~PTE_COW) | PTE_W;
+
+      // free the old page if the last reference to it is removed
+      // printf("page_reference_count[PGREF_CNT(pa)] = %d\n", page_reference_count[PGREF_CNT(pa)]);
+      // if (page_reference_count[PGREF_CNT(pa)] <= 1) {
+      //   page_reference_count[PGREF_CNT(pa)] = 0;
+        kfree((void*)pa);
+        pa = (uint64)page;
+      // } else {
+      //   page_reference_count[PGREF_CNT(pa)]--;
+      // }
+    }
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
@@ -72,7 +115,7 @@ usertrap(void)
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
   }
-
+trap_err:
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..a862db6 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -15,6 +15,8 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+extern int page_reference_count[]; // array size is PHYSTOP/PGSIZE
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -303,23 +305,37 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
+    // The reason we use walk here is to validate the PTE flags.
+    // So that we can make sure the PTE is valid and needs to be copied.
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    flags = (PTE_FLAGS(*pte) & (~PTE_W)) | PTE_COW;
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    *pte = PA2PTE(pa) | flags;
+    if(mappages(new, i, PGSIZE, pa, flags) != 0)
       goto err;
-    }
-  }
+    // increase the page reference count
+    page_reference_count[PGREF_CNT(pa)]++;
+    //   kfree(mem);
+    //   goto err;
+    // }
+  } // examine the old pagetable
+  // for (i = 0; i< 512; i++) {
+  //   pte_t *pte = &old[i]; // get pointer to old page table entry
+  //   *pte = *pte & ~PTE_W; // clear write bit
+  //   *pte = *pte | PTE_COW; // set COW bit
+  //   new[i] = *pte;        // copy page table entry directly
+  //   // increase the page reference count
+  //   page_reference_count[PTE2PA(*pte) / PGSIZE]++;
+  // }
   return 0;
 
  err:
@@ -347,15 +363,39 @@ int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
+  pte_t * pte;
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
-    pa0 = walkaddr(pagetable, va0);
+    pte = walk(pagetable, va0, 0);
+    pa0 = PTE2PA(*pte);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
+    if (*pte & PTE_COW) {
+      // if the page is COW, we need to copy the page first
+      // before we can write to it
+      uint flags = PTE_FLAGS(*pte);
+      char *page;
+      if((page = kalloc()) == 0)
+        panic("copyout(): out of memory");
+      memmove(page, (char*)pa0, PGSIZE);
+      *pte = PA2PTE((uint64)page) | (flags & ~PTE_COW) | PTE_W;
+      // mappages(pagetable, va0, PGSIZE, (uint64)page, PTE_W | (~PTE_COW & PTE_FLAGS(*pte)));
+        // kfree(page);
+        // return -1;
+      // }
+      // decrease the page reference count
+      // if (page_reference_count[PGREF_CNT(pa0)] <= 1) {
+      //   page_reference_count[PGREF_CNT(pa0)] = 0;
+        kfree((void*)pa0);
+        pa0 = (uint64) page;
+      // } else {
+      //   page_reference_count[PGREF_CNT(pa0)]--;
+      // }
+    }
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
     len -= n;
